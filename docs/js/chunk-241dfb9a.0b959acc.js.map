{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/pony.js.js","webpack:///./node_modules/highlight.js/lib/languages/pony.js"],"names":["emitWarning","warned","console","log","module","exports","pony","hljs","KEYWORDS","keyword","meta","literal","TRIPLE_QUOTE_STRING_MODE","className","begin","end","relevance","QUOTE_STRING_MODE","contains","BACKSLASH_ESCAPE","SINGLE_QUOTE_CHAR_MODE","TYPE_NAME","PRIMED_NAME","IDENT_RE","NUMBER_MODE","name","keywords","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE"],"mappings":"oHAAA,SAASA,IACAA,EAAYC,SACfD,EAAYC,QAAS,EACrBC,QAAQC,IACN,kKAINH,IACEI,EAAOC,QAAU,EAAQ,S,qBCD7B,SAASC,EAAKC,GACZ,MAAMC,EAAW,CACfC,QACE,iTAKFC,KACE,0BACFC,QACE,mBAGEC,EAA2B,CAC/BC,UAAW,SACXC,MAAO,MACPC,IAAK,MACLC,UAAW,IAGPC,EAAoB,CACxBJ,UAAW,SACXC,MAAO,IACPC,IAAK,IACLG,SAAU,CAAEX,EAAKY,mBAGbC,EAAyB,CAC7BP,UAAW,SACXC,MAAO,IACPC,IAAK,IACLG,SAAU,CAAEX,EAAKY,kBACjBH,UAAW,GAGPK,EAAY,CAChBR,UAAW,OACXC,MAAO,mBACPE,UAAW,GAGPM,EAAc,CAClBR,MAAOP,EAAKgB,SAAW,IACvBP,UAAW,GAGPQ,EAAc,CAClBX,UAAW,SACXC,MAAO,+FACPE,UAAW,GAcb,MAAO,CACLS,KAAM,OACNC,SAAUlB,EACVU,SAAU,CACRG,EACAT,EACAK,EACAG,EACAE,EACAE,EACAjB,EAAKoB,oBACLpB,EAAKqB,uBAKXxB,EAAOC,QAAUC","file":"js/chunk-241dfb9a.0b959acc.js","sourcesContent":["function emitWarning() {\n    if (!emitWarning.warned) {\n      emitWarning.warned = true;\n      console.log(\n        'Deprecation (warning): Using file extension in specifier is deprecated, use \"highlight.js/lib/languages/pony\" instead of \"highlight.js/lib/languages/pony.js\"'\n      );\n    }\n  }\n  emitWarning();\n    module.exports = require('./pony.js');","/*\nLanguage: Pony\nAuthor: Joe Eli McIlvain <joe.eli.mac@gmail.com>\nDescription: Pony is an open-source, object-oriented, actor-model,\n             capabilities-secure, high performance programming language.\nWebsite: https://www.ponylang.io\n*/\n\nfunction pony(hljs) {\n  const KEYWORDS = {\n    keyword:\n      'actor addressof and as be break class compile_error compile_intrinsic ' +\n      'consume continue delegate digestof do else elseif embed end error ' +\n      'for fun if ifdef in interface is isnt lambda let match new not object ' +\n      'or primitive recover repeat return struct then trait try type until ' +\n      'use var where while with xor',\n    meta:\n      'iso val tag trn box ref',\n    literal:\n      'this false true'\n  };\n\n  const TRIPLE_QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"\"\"',\n    end: '\"\"\"',\n    relevance: 10\n  };\n\n  const QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    end: '\"',\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n\n  const SINGLE_QUOTE_CHAR_MODE = {\n    className: 'string',\n    begin: '\\'',\n    end: '\\'',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    relevance: 0\n  };\n\n  const TYPE_NAME = {\n    className: 'type',\n    begin: '\\\\b_?[A-Z][\\\\w]*',\n    relevance: 0\n  };\n\n  const PRIMED_NAME = {\n    begin: hljs.IDENT_RE + '\\'',\n    relevance: 0\n  };\n\n  const NUMBER_MODE = {\n    className: 'number',\n    begin: '(-?)(\\\\b0[xX][a-fA-F0-9]+|\\\\b0[bB][01]+|(\\\\b\\\\d+(_\\\\d+)?(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)',\n    relevance: 0\n  };\n\n  /**\n   * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify\n   * highlighting and fix cases like\n   * ```\n   * interface Iterator[A: A]\n   *   fun has_next(): Bool\n   *   fun next(): A?\n   * ```\n   * where it is valid to have a function head without a body\n   */\n\n  return {\n    name: 'Pony',\n    keywords: KEYWORDS,\n    contains: [\n      TYPE_NAME,\n      TRIPLE_QUOTE_STRING_MODE,\n      QUOTE_STRING_MODE,\n      SINGLE_QUOTE_CHAR_MODE,\n      PRIMED_NAME,\n      NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n}\n\nmodule.exports = pony;\n"],"sourceRoot":""}