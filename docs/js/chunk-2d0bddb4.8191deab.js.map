{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/yaml.js"],"names":["yaml","hljs","LITERALS","URI_CHARACTERS","KEY","className","variants","begin","TEMPLATE_VARIABLES","end","STRING","relevance","contains","BACKSLASH_ESCAPE","CONTAINER_STRING","inherit","DATE_RE","TIME_RE","FRACTION_RE","ZONE_RE","TIMESTAMP","VALUE_CONTAINER","endsWithParent","excludeEnd","keywords","OBJECT","illegal","ARRAY","MODES","subLanguage","excludeBegin","UNDERSCORE_IDENT_RE","HASH_COMMENT_MODE","beginKeywords","literal","C_NUMBER_RE","VALUE_MODES","pop","push","name","case_insensitive","aliases","module","exports"],"mappings":"mGASA,SAASA,EAAKC,GACZ,MAAMC,EAAW,yBAGXC,EAAiB,8BAMjBC,EAAM,CACVC,UAAW,OACXC,SAAU,CACR,CACEC,MAAO,gCAET,CACEA,MAAO,kCAET,CACEA,MAAO,oCAKPC,EAAqB,CACzBH,UAAW,oBACXC,SAAU,CACR,CACEC,MAAO,OACPE,IAAK,QAEP,CACEF,MAAO,MACPE,IAAK,QAILC,EAAS,CACbL,UAAW,SACXM,UAAW,EACXL,SAAU,CACR,CACEC,MAAO,IACPE,IAAK,KAEP,CACEF,MAAO,IACPE,IAAK,KAEP,CACEF,MAAO,QAGXK,SAAU,CACRX,EAAKY,iBACLL,IAMEM,EAAmBb,EAAKc,QAAQL,EAAQ,CAC5CJ,SAAU,CACR,CACEC,MAAO,IACPE,IAAK,KAEP,CACEF,MAAO,IACPE,IAAK,KAEP,CACEF,MAAO,mBAKPS,EAAU,6BACVC,EAAU,yCACVC,EAAc,eACdC,EAAU,8CACVC,EAAY,CAChBf,UAAW,SACXE,MAAO,MAAQS,EAAUC,EAAUC,EAAcC,EAAU,OAGvDE,EAAkB,CACtBZ,IAAK,IACLa,gBAAgB,EAChBC,YAAY,EACZC,SAAUtB,EACVS,UAAW,GAEPc,EAAS,CACblB,MAAO,KACPE,IAAK,KACLG,SAAU,CAAES,GACZK,QAAS,MACTf,UAAW,GAEPgB,EAAQ,CACZpB,MAAO,MACPE,IAAK,MACLG,SAAU,CAAES,GACZK,QAAS,MACTf,UAAW,GAGPiB,EAAQ,CACZxB,EACA,CACEC,UAAW,OACXE,MAAO,YACPI,UAAW,IAEb,CAKEN,UAAW,SACXE,MAAO,iEAET,CACEA,MAAO,WACPE,IAAK,UACLoB,YAAa,OACbC,cAAc,EACdP,YAAY,EACZZ,UAAW,GAEb,CACEN,UAAW,OACXE,MAAO,SAAWJ,GAGpB,CACEE,UAAW,OACXE,MAAO,KAAOJ,EAAiB,KAEjC,CACEE,UAAW,OACXE,MAAO,IAAMJ,GAEf,CACEE,UAAW,OACXE,MAAO,KAAOJ,GAEhB,CACEE,UAAW,OACXE,MAAO,IAAMN,EAAK8B,oBAAsB,KAE1C,CACE1B,UAAW,OACXE,MAAO,MAAQN,EAAK8B,oBAAsB,KAE5C,CACE1B,UAAW,SAEXE,MAAO,aACPI,UAAW,GAEbV,EAAK+B,kBACL,CACEC,cAAe/B,EACfsB,SAAU,CACRU,QAAShC,IAGbkB,EAGA,CACEf,UAAW,SACXE,MAAON,EAAKkC,YAAc,MAC1BxB,UAAW,GAEbc,EACAE,EACAjB,GAGI0B,EAAc,IAAKR,GAKzB,OAJAQ,EAAYC,MACZD,EAAYE,KAAKxB,GACjBO,EAAgBT,SAAWwB,EAEpB,CACLG,KAAM,OACNC,kBAAkB,EAClBC,QAAS,CAAE,OACX7B,SAAUgB,GAIdc,EAAOC,QAAU3C","file":"js/chunk-2d0bddb4.8191deab.js","sourcesContent":["/*\nLanguage: YAML\nDescription: Yet Another Markdown Language\nAuthor: Stefan Wienert <stwienert@gmail.com>\nContributors: Carl Baxter <carl@cbax.tech>\nRequires: ruby.js\nWebsite: https://yaml.org\nCategory: common, config\n*/\nfunction yaml(hljs) {\n  const LITERALS = 'true false yes no null';\n\n  // YAML spec allows non-reserved URI characters in tags.\n  const URI_CHARACTERS = '[\\\\w#;/?:@&=+$,.~*\\'()[\\\\]]+';\n\n  // Define keys as starting with a word character\n  // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods\n  // ...and ending with a colon followed immediately by a space, tab or newline.\n  // The YAML spec allows for much more than this, but this covers most use-cases.\n  const KEY = {\n    className: 'attr',\n    variants: [\n      {\n        begin: '\\\\w[\\\\w :\\\\/.-]*:(?=[ \\t]|$)'\n      },\n      { // double quoted keys\n        begin: '\"\\\\w[\\\\w :\\\\/.-]*\":(?=[ \\t]|$)'\n      },\n      { // single quoted keys\n        begin: '\\'\\\\w[\\\\w :\\\\/.-]*\\':(?=[ \\t]|$)'\n      }\n    ]\n  };\n\n  const TEMPLATE_VARIABLES = {\n    className: 'template-variable',\n    variants: [\n      { // jinja templates Ansible\n        begin: /\\{\\{/,\n        end: /\\}\\}/\n      },\n      { // Ruby i18n\n        begin: /%\\{/,\n        end: /\\}/\n      }\n    ]\n  };\n  const STRING = {\n    className: 'string',\n    relevance: 0,\n    variants: [\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      },\n      {\n        begin: /\\S+/\n      }\n    ],\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      TEMPLATE_VARIABLES\n    ]\n  };\n\n  // Strings inside of value containers (objects) can't contain braces,\n  // brackets, or commas\n  const CONTAINER_STRING = hljs.inherit(STRING, {\n    variants: [\n      {\n        begin: /'/,\n        end: /'/\n      },\n      {\n        begin: /\"/,\n        end: /\"/\n      },\n      {\n        begin: /[^\\s,{}[\\]]+/\n      }\n    ]\n  });\n\n  const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';\n  const TIME_RE = '([Tt \\\\t][0-9][0-9]?(:[0-9][0-9]){2})?';\n  const FRACTION_RE = '(\\\\.[0-9]*)?';\n  const ZONE_RE = '([ \\\\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';\n  const TIMESTAMP = {\n    className: 'number',\n    begin: '\\\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\\\b'\n  };\n\n  const VALUE_CONTAINER = {\n    end: ',',\n    endsWithParent: true,\n    excludeEnd: true,\n    keywords: LITERALS,\n    relevance: 0\n  };\n  const OBJECT = {\n    begin: /\\{/,\n    end: /\\}/,\n    contains: [ VALUE_CONTAINER ],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n  const ARRAY = {\n    begin: '\\\\[',\n    end: '\\\\]',\n    contains: [ VALUE_CONTAINER ],\n    illegal: '\\\\n',\n    relevance: 0\n  };\n\n  const MODES = [\n    KEY,\n    {\n      className: 'meta',\n      begin: '^---\\\\s*$',\n      relevance: 10\n    },\n    { // multi line string\n      // Blocks start with a | or > followed by a newline\n      //\n      // Indentation of subsequent lines must be the same to\n      // be considered part of the block\n      className: 'string',\n      begin: '[\\\\|>]([1-9]?[+-])?[ ]*\\\\n( +)[^ ][^\\\\n]*\\\\n(\\\\2[^\\\\n]+\\\\n?)*'\n    },\n    { // Ruby/Rails erb\n      begin: '<%[%=-]?',\n      end: '[%-]?%>',\n      subLanguage: 'ruby',\n      excludeBegin: true,\n      excludeEnd: true,\n      relevance: 0\n    },\n    { // named tags\n      className: 'type',\n      begin: '!\\\\w+!' + URI_CHARACTERS\n    },\n    // https://yaml.org/spec/1.2/spec.html#id2784064\n    { // verbatim tags\n      className: 'type',\n      begin: '!<' + URI_CHARACTERS + \">\"\n    },\n    { // primary tags\n      className: 'type',\n      begin: '!' + URI_CHARACTERS\n    },\n    { // secondary tags\n      className: 'type',\n      begin: '!!' + URI_CHARACTERS\n    },\n    { // fragment id &ref\n      className: 'meta',\n      begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // fragment reference *ref\n      className: 'meta',\n      begin: '\\\\*' + hljs.UNDERSCORE_IDENT_RE + '$'\n    },\n    { // array listing\n      className: 'bullet',\n      // TODO: remove |$ hack when we have proper look-ahead support\n      begin: '-(?=[ ]|$)',\n      relevance: 0\n    },\n    hljs.HASH_COMMENT_MODE,\n    {\n      beginKeywords: LITERALS,\n      keywords: {\n        literal: LITERALS\n      }\n    },\n    TIMESTAMP,\n    // numbers are any valid C-style number that\n    // sit isolated from other words\n    {\n      className: 'number',\n      begin: hljs.C_NUMBER_RE + '\\\\b',\n      relevance: 0\n    },\n    OBJECT,\n    ARRAY,\n    STRING\n  ];\n\n  const VALUE_MODES = [ ...MODES ];\n  VALUE_MODES.pop();\n  VALUE_MODES.push(CONTAINER_STRING);\n  VALUE_CONTAINER.contains = VALUE_MODES;\n\n  return {\n    name: 'YAML',\n    case_insensitive: true,\n    aliases: [ 'yml' ],\n    contains: MODES\n  };\n}\n\nmodule.exports = yaml;\n"],"sourceRoot":""}