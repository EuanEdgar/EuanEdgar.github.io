{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/c.js","webpack:///./node_modules/highlight.js/lib/languages/c.js.js"],"names":["source","re","optional","concat","args","joined","map","x","join","c","hljs","C_LINE_COMMENT_MODE","COMMENT","contains","begin","DECLTYPE_AUTO_RE","NAMESPACE_RE","TEMPLATE_ARGUMENT_RE","FUNCTION_TYPE_RE","TYPES","className","variants","match","CHARACTER_ESCAPES","STRINGS","end","illegal","BACKSLASH_ESCAPE","END_SAME_AS_BEGIN","NUMBERS","relevance","PREPROCESSOR","keywords","keyword","inherit","C_BLOCK_COMMENT_MODE","TITLE_MODE","IDENT_RE","FUNCTION_TITLE","C_KEYWORDS","C_TYPES","KEYWORDS","type","literal","built_in","EXPRESSION_CONTAINS","EXPRESSION_CONTEXT","beginKeywords","FUNCTION_DECLARATION","returnBegin","excludeEnd","name","aliases","disableAutodetect","exports","preprocessor","strings","module","emitWarning","warned","console","log"],"mappings":"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","file":"js/chunk-bccfb2fa.1118fcea.js","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/*\nLanguage: C\nCategory: common, system\nWebsite: https://en.wikipedia.org/wiki/C_(programming_language)\n*/\n\n/** @type LanguageFn */\nfunction c(hljs) {\n  // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does\n  // not include such support nor can we be sure all the grammars depending\n  // on it would desire this behavior\n  const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', {\n    contains: [\n      {\n        begin: /\\\\\\n/\n      }\n    ]\n  });\n  const DECLTYPE_AUTO_RE = 'decltype\\\\(auto\\\\)';\n  const NAMESPACE_RE = '[a-zA-Z_]\\\\w*::';\n  const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';\n  const FUNCTION_TYPE_RE = '(' +\n    DECLTYPE_AUTO_RE + '|' +\n    optional(NAMESPACE_RE) +\n    '[a-zA-Z_]\\\\w*' + optional(TEMPLATE_ARGUMENT_RE) +\n  ')';\n\n\n  const TYPES = {\n    className: 'type',\n    variants: [\n      { begin: '\\\\b[a-z\\\\d_]*_t\\\\b' },\n      { match: /\\batomic_[a-z]{3,6}\\b/}\n    ]\n\n  };\n\n  // https://en.cppreference.com/w/cpp/language/escape\n  // \\\\ \\x \\xFF \\u2837 \\u00323747 \\374\n  const CHARACTER_ESCAPES = '\\\\\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\\\S)';\n  const STRINGS = {\n    className: 'string',\n    variants: [\n      {\n        begin: '(u8?|U|L)?\"',\n        end: '\"',\n        illegal: '\\\\n',\n        contains: [ hljs.BACKSLASH_ESCAPE ]\n      },\n      {\n        begin: '(u8?|U|L)?\\'(' + CHARACTER_ESCAPES + \"|.)\",\n        end: '\\'',\n        illegal: '.'\n      },\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(?:u8?|U|L)?R\"([^()\\\\ ]{0,16})\\(/,\n        end: /\\)([^()\\\\ ]{0,16})\"/\n      })\n    ]\n  };\n\n  const NUMBERS = {\n    className: 'number',\n    variants: [\n      {\n        begin: '\\\\b(0b[01\\']+)'\n      },\n      {\n        begin: '(-?)\\\\b([\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)'\n      },\n      {\n        begin: '(-?)(\\\\b0[xX][a-fA-F0-9\\']+|(\\\\b[\\\\d\\']+(\\\\.[\\\\d\\']*)?|\\\\.[\\\\d\\']+)([eE][-+]?[\\\\d\\']+)?)'\n      }\n    ],\n    relevance: 0\n  };\n\n  const PREPROCESSOR = {\n    className: 'meta',\n    begin: /#\\s*[a-z]+\\b/,\n    end: /$/,\n    keywords: {\n      keyword:\n        'if else elif endif define undef warning error line ' +\n        'pragma _Pragma ifdef ifndef include'\n    },\n    contains: [\n      {\n        begin: /\\\\\\n/,\n        relevance: 0\n      },\n      hljs.inherit(STRINGS, {\n        className: 'string'\n      }),\n      {\n        className: 'string',\n        begin: /<.*?>/\n      },\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ]\n  };\n\n  const TITLE_MODE = {\n    className: 'title',\n    begin: optional(NAMESPACE_RE) + hljs.IDENT_RE,\n    relevance: 0\n  };\n\n  const FUNCTION_TITLE = optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\\\s*\\\\(';\n\n  const C_KEYWORDS = [\n    \"asm\",\n    \"auto\",\n    \"break\",\n    \"case\",\n    \"const\",\n    \"continue\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"enum\",\n    \"extern\",\n    \"for\",\n    \"fortran\",\n    \"goto\",\n    \"if\",\n    \"inline\",\n    \"register\",\n    \"restrict\",\n    \"return\",\n    \"sizeof\",\n    \"static\",\n    \"struct\",\n    \"switch\",\n    \"typedef\",\n    \"union\",\n    \"volatile\",\n    \"while\",\n    \"_Alignas\",\n    \"_Alignof\",\n    \"_Atomic\",\n    \"_Generic\",\n    \"_Noreturn\",\n    \"_Static_assert\",\n    \"_Thread_local\",\n    // aliases\n    \"alignas\",\n    \"alignof\",\n    \"noreturn\",\n    \"static_assert\",\n    \"thread_local\",\n    // not a C keyword but is, for all intents and purposes, treated exactly like one.\n    \"_Pragma\"\n  ];\n\n  const C_TYPES = [\n    \"float\",\n    \"double\",\n    \"signed\",\n    \"unsigned\",\n    \"int\",\n    \"short\",\n    \"long\",\n    \"char\",\n    \"void\",\n    \"_Bool\",\n    \"_Complex\",\n    \"_Imaginary\",\n    \"_Decimal32\",\n    \"_Decimal64\",\n    \"_Decimal128\",\n    // aliases\n    \"complex\",\n    \"bool\",\n    \"imaginary\"\n  ];\n\n  const KEYWORDS = {\n    keyword: C_KEYWORDS,\n    type: C_TYPES,\n    literal: 'true false NULL',\n    // TODO: apply hinting work similar to what was done in cpp.js\n    built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream ' +\n      'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set ' +\n      'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos ' +\n      'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp ' +\n      'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper ' +\n      'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow ' +\n      'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp ' +\n      'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan ' +\n      'vfprintf vprintf vsprintf endl initializer_list unique_ptr',\n  };\n\n  const EXPRESSION_CONTAINS = [\n    PREPROCESSOR,\n    TYPES,\n    C_LINE_COMMENT_MODE,\n    hljs.C_BLOCK_COMMENT_MODE,\n    NUMBERS,\n    STRINGS\n  ];\n\n  const EXPRESSION_CONTEXT = {\n    // This mode covers expression context where we can't expect a function\n    // definition and shouldn't highlight anything that looks like one:\n    // `return some()`, `else if()`, `(x*sum(1, 2))`\n    variants: [\n      {\n        begin: /=/,\n        end: /;/\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/\n      },\n      {\n        beginKeywords: 'new throw return else',\n        end: /;/\n      }\n    ],\n    keywords: KEYWORDS,\n    contains: EXPRESSION_CONTAINS.concat([\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        contains: EXPRESSION_CONTAINS.concat([ 'self' ]),\n        relevance: 0\n      }\n    ]),\n    relevance: 0\n  };\n\n  const FUNCTION_DECLARATION = {\n    begin: '(' + FUNCTION_TYPE_RE + '[\\\\*&\\\\s]+)+' + FUNCTION_TITLE,\n    returnBegin: true,\n    end: /[{;=]/,\n    excludeEnd: true,\n    keywords: KEYWORDS,\n    illegal: /[^\\w\\s\\*&:<>.]/,\n    contains: [\n      { // to prevent it from being confused as the function title\n        begin: DECLTYPE_AUTO_RE,\n        keywords: KEYWORDS,\n        relevance: 0\n      },\n      {\n        begin: FUNCTION_TITLE,\n        returnBegin: true,\n        contains: [\n          hljs.inherit(TITLE_MODE, { className: \"title.function\" })\n        ],\n        relevance: 0\n      },\n      // allow for multiple declarations, e.g.:\n      // extern void f(int), g(char);\n      {\n        relevance: 0,\n        match: /,/\n      },\n      {\n        className: 'params',\n        begin: /\\(/,\n        end: /\\)/,\n        keywords: KEYWORDS,\n        relevance: 0,\n        contains: [\n          C_LINE_COMMENT_MODE,\n          hljs.C_BLOCK_COMMENT_MODE,\n          STRINGS,\n          NUMBERS,\n          TYPES,\n          // Count matching parentheses.\n          {\n            begin: /\\(/,\n            end: /\\)/,\n            keywords: KEYWORDS,\n            relevance: 0,\n            contains: [\n              'self',\n              C_LINE_COMMENT_MODE,\n              hljs.C_BLOCK_COMMENT_MODE,\n              STRINGS,\n              NUMBERS,\n              TYPES\n            ]\n          }\n        ]\n      },\n      TYPES,\n      C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      PREPROCESSOR\n    ]\n  };\n\n  return {\n    name: \"C\",\n    aliases: [\n      'h'\n    ],\n    keywords: KEYWORDS,\n    // Until differentiations are added between `c` and `cpp`, `c` will\n    // not be auto-detected to avoid auto-detect conflicts between C and C++\n    disableAutodetect: true,\n    illegal: '</',\n    contains: [].concat(\n      EXPRESSION_CONTEXT,\n      FUNCTION_DECLARATION,\n      EXPRESSION_CONTAINS,\n      [\n        PREPROCESSOR,\n        {\n          begin: hljs.IDENT_RE + '::',\n          keywords: KEYWORDS\n        },\n        {\n          className: 'class',\n          beginKeywords: 'enum class struct union',\n          end: /[{;:<>=]/,\n          contains: [\n            {\n              beginKeywords: \"final class struct\"\n            },\n            hljs.TITLE_MODE\n          ]\n        }\n      ]),\n    exports: {\n      preprocessor: PREPROCESSOR,\n      strings: STRINGS,\n      keywords: KEYWORDS\n    }\n  };\n}\n\nmodule.exports = c;\n","function emitWarning() {\n    if (!emitWarning.warned) {\n      emitWarning.warned = true;\n      console.log(\n        'Deprecation (warning): Using file extension in specifier is deprecated, use \"highlight.js/lib/languages/c\" instead of \"highlight.js/lib/languages/c.js\"'\n      );\n    }\n  }\n  emitWarning();\n    module.exports = require('./c.js');"],"sourceRoot":""}