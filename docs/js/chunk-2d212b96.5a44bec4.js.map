{"version":3,"sources":["webpack:///./node_modules/highlight.js/lib/languages/wren.js"],"names":["source","re","lookahead","concat","args","joined","map","x","join","stripOptionsFromArgs","opts","length","constructor","Object","splice","either","capture","wren","hljs","IDENT_RE","KEYWORDS","LITERALS","LANGUAGE_VARS","CORE_CLASSES","OPERATORS","FUNCTION","relevance","match","className","FUNCTION_DEFINITION","starts","contains","begin","end","scope","CLASS_DEFINITION","variants","2","4","keywords","OPERATOR","TRIPLE_STRING","PROPERTY","excludeBegin","FIELD","CLASS_REFERENCE","_","NUMBER","C_NUMBER_MODE","SETTER","1","3","6","COMMENT_DOCS","COMMENT","SUBST","STRING","push","ALL_KWS","VARIABLE","ATTRIBUTE","beginScope","literal","name","keyword","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","module","exports"],"mappings":"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","file":"js/chunk-2d212b96.5a44bec4.js","sourcesContent":["/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] } args\n * @returns {string}\n */\nfunction either(...args) {\n  const opts = stripOptionsFromArgs(args);\n  const joined = '(' +\n    (opts.capture ? \"\" : \"?:\") +\n    args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/*\nLanguage: Wren\nDescription: Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax.\nCategory: scripting\nAuthor: @joshgoebel\nMaintainer: @joshgoebel\nWebsite: https://wren.io/\n*/\n\n/** @type LanguageFn */\nfunction wren(hljs) {\n  const IDENT_RE = /[a-zA-Z]\\w*/;\n  const KEYWORDS = [\n    \"as\",\n    \"break\",\n    \"class\",\n    \"construct\",\n    \"continue\",\n    \"else\",\n    \"for\",\n    \"foreign\",\n    \"if\",\n    \"import\",\n    \"in\",\n    \"is\",\n    \"return\",\n    \"static\",\n    \"var\",\n    \"while\"\n  ];\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\"\n  ];\n  const LANGUAGE_VARS = [\n    \"this\",\n    \"super\"\n  ];\n  const CORE_CLASSES = [\n    \"Bool\",\n    \"Class\",\n    \"Fiber\",\n    \"Fn\",\n    \"List\",\n    \"Map\",\n    \"Null\",\n    \"Num\",\n    \"Object\",\n    \"Range\",\n    \"Sequence\",\n    \"String\",\n    \"System\"\n  ];\n  const OPERATORS = [\n    \"-\",\n    \"~\",\n    /\\*/,\n    \"%\",\n    /\\.\\.\\./,\n    /\\.\\./,\n    /\\+/,\n    \"<<\", \">>\",\n    \">=\", \"<=\",\n    \"<\", \">\",\n    /\\^/,\n    /!=/,\n    /!/,\n    /\\bis\\b/,\n    \"==\",\n    \"&&\",\n    \"&\",\n    /\\|\\|/,\n    /\\|/,\n    /\\?:/,\n    \"=\"\n  ];\n  const FUNCTION = {\n    relevance: 0,\n    match: concat(/\\b(?!(if|while|for|else|super)\\b)/, IDENT_RE, /(?=\\s*[({])/),\n    className: \"title.function\"\n  };\n  const FUNCTION_DEFINITION = {\n    match: concat(\n      either(\n        concat(/\\b(?!(if|while|for|else|super)\\b)/, IDENT_RE),\n        either(...OPERATORS)\n      ),\n      /(?=\\s*\\([^)]+\\)\\s*\\{)/),\n    className: \"title.function\",\n    starts: {\n      contains: [\n        {\n          begin: /\\(/,\n          end: /\\)/,\n          contains: [\n            {\n              relevance: 0,\n              scope: \"params\",\n              match: IDENT_RE\n            }\n          ]\n        }\n      ]\n    }\n  };\n  const CLASS_DEFINITION = {\n    variants: [\n      {\n        match: [\n          /class\\s+/,\n          IDENT_RE,\n          /\\s+is\\s+/,\n          IDENT_RE\n        ]\n      },\n      {\n        match: [\n          /class\\s+/,\n          IDENT_RE\n        ]\n      }\n    ],\n    scope: {\n      2: \"title.class\",\n      4: \"title.class.inherited\"\n    },\n    keywords: KEYWORDS\n  };\n\n  const OPERATOR = {\n    relevance: 0,\n    match: either(...OPERATORS),\n    className: \"operator\"\n  };\n\n  const TRIPLE_STRING = {\n    className: \"string\",\n    begin: /\"\"\"/,\n    end: /\"\"\"/\n  };\n\n  const PROPERTY = {\n    className: \"property\",\n    begin: concat(/\\./, lookahead(IDENT_RE)),\n    end: IDENT_RE,\n    excludeBegin: true,\n    relevance: 0\n  };\n\n  const FIELD = {\n    relevance: 0,\n    match: concat(/\\b_/, IDENT_RE),\n    scope: \"variable\"\n  };\n\n  // CamelCase\n  const CLASS_REFERENCE = {\n    relevance: 0,\n    match: /\\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,\n    scope: \"title.class\",\n    keywords: {\n      _: CORE_CLASSES\n    }\n  };\n\n  // TODO: add custom number modes\n  const NUMBER = hljs.C_NUMBER_MODE;\n\n  const SETTER = {\n    match: [\n      IDENT_RE, /\\s*/,\n      /=/, /\\s*/,\n      /\\(/, IDENT_RE, /\\)\\s*\\{/\n    ],\n    scope: {\n      1: \"title.function\",\n      3: \"operator\",\n      6: \"params\"\n    }\n  };\n\n  const COMMENT_DOCS = hljs.COMMENT(\n    /\\/\\*\\*/,\n    /\\*\\//,\n    {\n      contains: [\n        {\n          match: /@[a-z]+/,\n          scope: \"doctag\"\n        },\n        \"self\"\n      ]\n    }\n  );\n  const SUBST = {\n    scope: \"subst\",\n    begin: /%\\(/,\n    end: /\\)/,\n    contains: [\n      NUMBER,\n      CLASS_REFERENCE,\n      FUNCTION,\n      FIELD,\n      OPERATOR\n    ]\n  };\n  const STRING = {\n    scope: \"string\",\n    begin: /\"/,\n    end: /\"/,\n    contains: [\n      SUBST,\n      {\n        scope: \"char.escape\",\n        variants: [\n          { match: /\\\\\\\\|\\\\[\"0%abefnrtv]/ },\n          { match: /\\\\x[0-9A-F]{2}/ },\n          { match: /\\\\u[0-9A-F]{4}/ },\n          { match: /\\\\U[0-9A-F]{8}/ }\n        ]\n      }\n    ]\n  };\n  SUBST.contains.push(STRING);\n\n  const ALL_KWS = [...KEYWORDS, ...LANGUAGE_VARS, ...LITERALS];\n  const VARIABLE = {\n    relevance: 0,\n    match: concat(\n      \"\\\\b(?!\",\n      ALL_KWS.join(\"|\"),\n      \"\\\\b)\",\n      /[a-zA-Z_]\\w*(?:[?!]|\\b)/\n    ),\n    className: \"variable\"\n  };\n\n  // TODO: reconsider this in the future\n  const ATTRIBUTE = {\n    // scope: \"meta\",\n    scope: \"comment\",\n    variants: [\n      {\n        begin: [/#!?/, /[A-Za-z_]+(?=\\()/],\n        beginScope: {\n          // 2: \"attr\"\n        },\n        keywords: {\n          literal: LITERALS\n        },\n        contains: [\n          // NUMBER,\n          // VARIABLE\n        ],\n        end: /\\)/\n      },\n      {\n        begin: [/#!?/, /[A-Za-z_]+/],\n        beginScope: {\n          // 2: \"attr\"\n        },\n        end: /$/\n      }\n    ]\n  };\n\n  return {\n    name: \"Wren\",\n    keywords: {\n      keyword: KEYWORDS,\n      \"variable.language\": LANGUAGE_VARS,\n      literal: LITERALS\n    },\n    contains: [\n      ATTRIBUTE,\n      NUMBER,\n      STRING,\n      TRIPLE_STRING,\n      COMMENT_DOCS,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE,\n      CLASS_REFERENCE,\n      CLASS_DEFINITION,\n      SETTER,\n      FUNCTION_DEFINITION,\n      FUNCTION,\n      OPERATOR,\n      FIELD,\n      PROPERTY,\n      VARIABLE\n    ]\n  };\n}\n\nmodule.exports = wren;\n"],"sourceRoot":""}